<?php
/**
 * @file
 * Contains the Micro views module
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Entity\EntityViewBuilder;
use Drupal\Core\Entity\EntityViewBuilderInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;


/**
 * Custom function to provide allowed values to the "Content types" field of
 * the Micro views paragraph
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array $content_types
 *   An array of node type labels, keyed by the node type name.
 *
 * @see \options_allowed_values()
 */
function rw_microviews_get_content_types(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  
  $content_types = node_type_get_names();
  // kint($content_types);
  
  return $content_types;
}

/**
 * Custom function
 *
 * This function populates the allowed values for the field_microview_display field
 *
 * @return array $display_options
 *   a keyed array of display options
 */
function rw_microviews_get_display_options() {
  $display_options = [
    'col'      => t('List (unformatted)'),
    'grid'     => t('Grid (equally spaced)'),
    'carousel' => t('Carousel (Slick slider)'),
  ];

  return $display_options;
}

/**
 * Custom function
 */
function rw_microviews_get_view_modes() {
//  $view_modes = Drupal::entityQuery('entity_view_mode')
//    ->condition('targetEntityType', 'node')
//    ->execute();
  
  // kint($view_modes);
  
  $view_modes = array(
    'banner'   => t('Banner'),
    'card'     => t('Card'),
    'carousel' => t('Carousel slide'),
    'hero'     => t('Hero'),
    'teaser'   => t('Teaser'),
    'headline' => t('Headline only')
  );
  
  return $view_modes;
}

/**
 * Implements hook_paragraph_view()
 *
 * Attach styles and javascript to render array
 */
function rw_microviews_paragraph_view(&$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'rw_microview') {
    // Add MICROVIEW stylesheets
    $build['#attached']['library'][] = 'rw_microviews/microview';
  }
}

/**
 * Implements hook_preprocess_paragraph()
 *
 * Fetch the micro view to display in the paragraph template
 */
function rw_microviews_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];
  
  if ($paragraph->bundle() == 'rw_microview') {
    // Apply the horizontal classes (if applicable)
    $horizontal = $paragraph->get('field_horizontal')->value;
    // kint($horizontal);
    
    switch ($horizontal) {
      case 'wide':
        $variables['attributes']['class'][] = 'rw-paragraph--microview--wide';
        break;
        
      case 'full':
        $variables['attributes']['class'][] = 'rw-paragraph--microview--full';
        break;
        
      default:
        $variables['attributes']['class'][] = 'rw-paragraph--microview--default';
        break;
    }
    
    // Set up some variables for use later
    $display       = $paragraph->get('field_microview_display')->value;     // This field name is not a mistake, well... not a typo anyway
    $view_mode     = $paragraph->get('field_view_mode')->value;
    $item_count    = $paragraph->get('field_microview_number')->value;
    $bundles       = $paragraph->get('field_microview_content_types')->getValue();
    $term_id       = ($paragraph->get('field_microview_taggedwith')->isEmpty()) ? NULL : $paragraph->get('field_microview_taggedwith')->target_id;
    
    // So carousel view mode is actually "slide"
    if ($view_mode == 'carousel') {
      $view_mode = 'slide';
    }
    
    // Provide some keyword info to the template
    $variables['is_term'] = FALSE;
    if ($term_id) {
      $variables['is_term'] = TRUE;
      $term = $paragraph->get('field_microview_taggedwith')->referencedEntities();
      $variables['term']    = $term[0]->label();
    }
    
    $content_types = array();
    foreach ($bundles as $bundle) {
      // kint($bundle);
      $content_types[] = $bundle['value'];
    }
    
    // Find out the sort order
    // At time of writing, the field options are:
    // recent|Newest first
    // home|Promoted to home page
    // reverse|Oldest first
    
    $sort_selection = $paragraph->get('field_sort')->value;
    switch ($sort_selection) {
      case 'reverse':
        $sort = 'ASC';
        $highlighted = FALSE;
        break;
  
      case 'home':
        $sort = 'ASC';
        $highlighted = TRUE;
        break;
  
      case 'recent':
      default:
        $sort = 'DESC';
        $highlighted = FALSE;
        break;
    }
    
    // Exclude the node this paragraph is in
    $node_id    = $paragraph->getParentEntity()->id();

    $ids        = rw_microviews_fetch_recent_nodes($content_types, $item_count, $sort, $highlighted, $term_id, [$node_id]);
    $item_count = count($ids); // Yes, overriding the query number, as the
                               // result may be fewer than wanted.
    
    // Add classes and custom variables
    $variables['attributes']['class'][] = 'rw-paragraph--microview--' . $display;
    $variables['attributes']['class'][] = 'rw-paragraph--microview--' . $display . '--' . $item_count; // Global display wrapper with total item number
    
    $variables['microview_display'] = $display;
    $variables['microview_count']   = $item_count;
  
    // Is this a slick carousel display?
    ($display == 'carousel') ? $is_slick = TRUE : $is_slick = FALSE;
  
    if ($is_slick) {
      $variables['is_slick'] = TRUE;
      // Attach special styles
      $variables['#attached']['library'][] =  'rw_pagebuilder/slick';
    }
    else {
      $variables['is_slick'] = FALSE;
    }
    
    
    $microview = array();
    $microview_slick = array();
    $i = 0;
    foreach ($ids as $revision_id => $nid) {
      $entity_type = 'node';
  
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder($entity_type);
      $storage = \Drupal::entityTypeManager()->getStorage($entity_type);
      $node = $storage->load($nid);
      $build = $view_builder->view($node, $view_mode);
      $microview[$i] = $build;
      $microview_slick[$i]['slide'] = $build;
      $i++;
    }
    
    // kint($microview);
    $variables['content']['microview'] = ($is_slick) ? rw_microviews_render_slick($microview_slick) : $microview;
    
//    // Check if there's no results for the microview and warn admin users
//    if ($item_count == 0 && $variables['is_admin']) {
//      $variables['content']['microview']['#suffix'] = '<div class="messages messages--warning">' .  t('Warning: The microview is configured to fetch content, but finds 0 results. Try broadening the query parameters') . '</div>';
//    }
    
    // And finally, add the libraries (css/js) we need to render this here
    // microview as per display modes et al
    
    //    kint($item_count);
    //    kint($bundles);
    //    kint($view_mode);
    //    kint($display);
    // kint($variables);
  }
}

/**
 * Render a Hero Slick carousel
 *
 * @param array $items
 *    A required array of slick contents: text, image or media.
 *    $items['slide']   - The HTML markup of an image, e.g.
 *                       '<img src="https://drupal.org/files/Three.gif" />',
 *    $items['caption'] - A render array for text, image or media
 *
 *
 * @return array $element
 *    A render array of a slick carousel
 */
function rw_microviews_render_slick($items) {
  // kint($items);
  
  // Invoke the plugin class, or use a DI service container accordingly.
  $slick = \Drupal::service('slick.manager');
  // Access the formatter service for image-related methods:
  $formatter = \Drupal::service('slick.formatter');
  
  $build = [];
  
  // Pass the $items to the array.
  $build['items'] = $items;
  
  // If no optionset name is provided via $build['settings'], slick will
  // fallback to 'default'.
  // Optionally override 'default' optionset with custom JS options.
  $build['options'] = [
    'autoplay' => TRUE,
    'dots'     => TRUE,
    'arrows'   => TRUE,
  ];
  
  $element = $slick->build($build);
  // Prepare $variables to pass into a .twig.html file.
  $variables['slick'] = $element;
  
  return $element;
}

/**
 * Implements hook_theme()
 *
 * Provide a template for the microview paragraph type
 */
function rw_microviews_theme() {
  $theme = array();
  
  // Provide a template for the Mosaic paragraph type
  $theme['paragraph__rw_microview'] = array(
    'base hook' => 'paragraph',
    'path'      => drupal_get_path('module', 'rw_microviews') . '/templates',
  );
  
  
  return $theme;
}

/**
 * Local function to fetch the correct recent nodes as set up by the microview
 * tier
 *
 * @param array $bundles
 *    An array of content type machine names
 * @param int $count
 *    An integer of maximum amount of values to return
 * @param string $sort
 *    A string to indicate the sort order of the post date. ASC for old, DESC
 *    for recent. Defaults to DESC
 * @param boolean $highlighted
 *    Boolean to select only promoted to home page nodes. defaults
 *    to FALSE;
 * @param int $term_id
 *    An integer value of a term ID to filter the results by. Defaults to no
 *    filter
 * @param array $exclude_nids
 *    An array of node IDs that should NOT be in the results
 *
 * @return array $micro_view
 *    A keyed array of loaded node objects, sorted by date, keyed by node id
 */
function rw_microviews_fetch_recent_nodes($bundles, $count, $sort = 'DESC', $highlighted = FALSE, $term_id = NULL, $exclude_nids = []) {
  // $highlighted = TRUE;
  
  $query = \Drupal::entityQuery('node')
    ->condition('type', $bundles, 'IN')
    ->condition('status', 1)
    ->condition('nid', $exclude_nids, 'NOT IN')
    ->sort('created' , $sort)
    ->range(0, $count);
  
  if ($highlighted) {
    $query->condition('promote', 1);
  }
  
  $ids = $query->execute();
  
  // kint($ids);
  
  // Filter the results if a keyword is given
  if ($term_id && count($ids) > 0) {
    // kint($term_id);
    $connection    = \Drupal::database();
    $nids_with_tid = [];
    $select        = $connection->select('taxonomy_index', 'ti')
                       ->fields('ti', array('nid'))
                       ->condition('ti.tid', $term_id, '=');
    
    $result = $select->execute();
    
    foreach ($result as $record) {
      if (in_array($record->nid, $ids)) {
        foreach ($ids as $revision_id => $nid) {
          if ($nid == $record->nid) {
            $nids_with_tid[$revision_id] = $nid;
          }
        }
      }
    }
    // kint($record);
    return $nids_with_tid;
  }
  
  // kint($ids);
  return $ids;
}